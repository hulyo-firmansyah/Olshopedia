{"version":3,"sources":["jquery-asRange.es.js"],"names":["global","factory","define","amd","exports","require","mod","jQuery","jqueryAsRangeEs","this","_jquery","_classCallCheck","instance","Constructor","TypeError","getEventObject","event","e","originalEvent","touches","length","_jquery2","obj","__esModule","default","_interopRequireDefault","_typeof","Symbol","iterator","constructor","prototype","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","DEFAULTS","namespace","skin","max","min","value","step","limit","range","direction","keyboard","replaceFirst","tip","scale","format","Pointer","$element","id","parent","uid","options","extend","classes","active","axis","position","offset","$wrap","trigger","data","start","getValueFromPosition","set","each","pointer","p","deactive","mousemove","eventObj","preventDefault","mouseup","document","off","on","proxy","addClass","removeClass","matchStep","matchLimit","updatePosition","focus","getPercent","css","interval","decimal","toString","split","Math","round","toFixed","parseFloat","left","right","remove","defaults","valuesNumber","gap","grid","init","values","push","part","j","lines","inlineGrid","len","num","perOfGrid","perOfValue","$scale","$lines","$values","appendTo","v","add","update","selected","_this","$arrow","p1","width","onUpdate","p2","that","opts","show","$tip","display","hide","get","hasOwnProperty","text","components","asRange","element","_this2","metas","is","val","index","attr","isNaN","after","isArray","initialized","updating","disabled","Error","append","buildPointers","bindEvents","_trigger","eventType","_len","arguments","params","Array","_key","concat","onFunction","replace","word","substring","toUpperCase","apply","pointerCount","$pointer","_this3","which","button","getAdjacentPointer","mousedown","px","getLength","diff","abs","height","_this4","setInterval","$doc","keys","UP","DOWN","LEFT","RIGHT","RETURN","ESCAPE","BACKSPACE","SPACE","map","bound","press","keyCode","attach","up","bind","detach","unbind"],"mappings":"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","file":"jquery-asRange.min.js","sourcesContent":["/**\n* asRange v0.3.4\n* https://github.com/amazingSurge/jquery-asRange\n*\n* Copyright (c) amazingSurge\n* Released under the LGPL-3.0 license\n*/\nimport $ from 'jquery';\n\nvar DEFAULTS = {\n  namespace: 'asRange',\n  skin: null,\n  max: 100,\n  min: 0,\n  value: null,\n  step: 10,\n  limit: true,\n  range: false,\n  direction: 'h', // 'v' or 'h'\n  keyboard: true,\n  replaceFirst: false, // false, 'inherit', {'inherit': 'default'}\n  tip: true,\n  scale: true,\n  format(value) {\n    return value;\n  }\n};\n\nfunction getEventObject (event) {\n  let e = event.originalEvent;\n  if (e.touches && e.touches.length && e.touches[0]) {\n    e = e.touches[0];\n  }\n\n  return e;\n}\n\nclass Pointer {\n  constructor ($element, id, parent) {\n    this.$element = $element;\n    this.uid = id;\n    this.parent = parent;\n    this.options = $.extend(true, {}, this.parent.options);\n    this.direction = this.options.direction;\n    this.value = null;\n    this.classes = {\n      active: `${this.parent.namespace}-pointer_active`\n    };\n  }\n\n  mousedown(event) {\n    const axis = this.parent.direction.axis;\n    const position = this.parent.direction.position;\n    const offset = this.parent.$wrap.offset();\n\n    this.$element.trigger(`${this.parent.namespace}::moveStart`, this);\n\n    this.data = {};\n    this.data.start = event[axis];\n    this.data.position = event[axis] - offset[position];\n\n    const value = this.parent.getValueFromPosition(this.data.position);\n    this.set(value);\n\n    $.each(this.parent.pointer, (i, p) => {\n      p.deactive();\n    });\n\n    this.active();\n\n    this.mousemove = function(event) {\n      const eventObj = getEventObject(event);\n      const value = this.parent.getValueFromPosition(this.data.position + (eventObj[axis] || this.data.start) - this.data.start);\n      this.set(value);\n\n      event.preventDefault();\n      return false;\n    };\n    this.mouseup = function() {\n      $(document).off('.asRange mousemove.asRange touchend.asRange mouseup.asRange touchcancel.asRange');\n      this.$element.trigger(`${this.parent.namespace}::moveEnd`, this);\n      return false;\n    };\n\n    $(document).on('touchmove.asRange mousemove.asRange', $.proxy(this.mousemove, this))\n      .on('touchend.asRange mouseup.asRange', $.proxy(this.mouseup, this));\n    return false;\n  }\n\n  active() {\n    this.$element.addClass(this.classes.active);\n  }\n\n  deactive() {\n    this.$element.removeClass(this.classes.active);\n  }\n\n  set(value) {\n    if (this.value === value) {\n      return;\n    }\n\n    if (this.parent.step) {\n      value = this.matchStep(value);\n    }\n    if (this.options.limit === true) {\n      value = this.matchLimit(value);\n    } else {\n      if (value <= this.parent.min) {\n        value = this.parent.min;\n      }\n      if (value >= this.parent.max) {\n        value = this.parent.max;\n      }\n    }\n    this.value = value;\n\n    this.updatePosition();\n    this.$element.focus();\n\n    this.$element.trigger(`${this.parent.namespace}::move`, this);\n  }\n\n  updatePosition() {\n    const position = {};\n\n    position[this.parent.direction.position] = `${this.getPercent()}%`;\n    this.$element.css(position);\n  }\n\n  getPercent() {\n    return ((this.value - this.parent.min) / this.parent.interval) * 100;\n  }\n\n  get() {\n    return this.value;\n  }\n\n  matchStep(value) {\n    const step = this.parent.step;\n    const decimal = step.toString().split('.')[1];\n\n    value = Math.round(value / step) * step;\n\n    if (decimal) {\n      value = value.toFixed(decimal.length);\n    }\n\n    return parseFloat(value);\n  }\n\n  matchLimit(value) {\n    let left;\n    let right;\n    const pointer = this.parent.pointer;\n\n    if (this.uid === 1) {\n      left = this.parent.min;\n    } else {\n      left = pointer[this.uid - 2].value;\n    }\n\n    if (pointer[this.uid] && pointer[this.uid].value !== null) {\n      right = pointer[this.uid].value;\n    } else {\n      right = this.parent.max;\n    }\n\n    if (value <= left) {\n      value = left;\n    }\n    if (value >= right) {\n      value = right;\n    }\n    return value;\n  }\n\n  destroy() {\n    this.$element.off('.asRange');\n    this.$element.remove();\n  }\n}\n\nvar scale = {\n  defaults: {\n    scale: {\n      valuesNumber: 3,\n      gap: 1,\n      grid: 5\n    }\n  },\n  init(instance) {\n    const opts = $.extend({}, this.defaults, instance.options.scale);\n    const scale = opts.scale;\n    scale.values = [];\n    scale.values.push(instance.min);\n    const part = (instance.max - instance.min) / (scale.valuesNumber - 1);\n    for (let j = 1; j <= (scale.valuesNumber - 2); j++) {\n      scale.values.push(part * j);\n    }\n    scale.values.push(instance.max);\n    const classes = {\n      scale: `${instance.namespace}-scale`,\n      lines: `${instance.namespace}-scale-lines`,\n      grid: `${instance.namespace}-scale-grid`,\n      inlineGrid: `${instance.namespace}-scale-inlineGrid`,\n      values: `${instance.namespace}-scale-values`\n    };\n\n    const len = scale.values.length;\n    const num = ((scale.grid - 1) * (scale.gap + 1) + scale.gap) * (len - 1) + len;\n    const perOfGrid = 100 / (num - 1);\n    const perOfValue = 100 / (len - 1);\n\n    this.$scale = $('<div></div>').addClass(classes.scale);\n    this.$lines = $('<ul></ul>').addClass(classes.lines);\n    this.$values = $('<ul></ul>').addClass(classes.values);\n\n    for (let i = 0; i < num; i++) {\n      let $list;\n      if (i === 0 || i === num || i % ((num - 1) / (len - 1)) === 0) {\n        $list = $(`<li class=\"${classes.grid}\"></li>`);\n      } else if (i % scale.grid === 0) {\n        $list = $(`<li class=\"${classes.inlineGrid}\"></li>`);\n      } else {\n        $list = $('<li></li>');\n      }\n\n      // position scale\n      $list.css({\n        left: `${perOfGrid * i}%`\n      }).appendTo(this.$lines);\n    }\n\n    for (let v = 0; v < len; v++) {\n      // position value\n      $(`<li><span>${scale.values[v]}</span></li>`).css({\n        left: `${perOfValue * v}%`\n      }).appendTo(this.$values);\n    }\n\n    this.$lines.add(this.$values).appendTo(this.$scale);\n    this.$scale.appendTo(instance.$wrap);\n  },\n  update(instance) {\n    this.$scale.remove();\n    this.init(instance);\n  }\n};\n\nvar selected = {\n  defaults: {},\n  init(instance) {\n    this.$arrow = $('<span></span>').appendTo(instance.$wrap);\n    this.$arrow.addClass(`${instance.namespace}-selected`);\n\n    if (instance.options.range === false) {\n      instance.p1.$element.on(`${instance.namespace}::move`, (e, pointer) => {\n        this.$arrow.css({\n          left: 0,\n          width: `${pointer.getPercent()}%`\n        });\n      });\n    }\n\n    if (instance.options.range === true) {\n      const onUpdate = () => {\n        let width = instance.p2.getPercent() - instance.p1.getPercent();\n        let left;\n        if (width >= 0) {\n          left = instance.p1.getPercent();\n        } else {\n          width = -width;\n          left = instance.p2.getPercent();\n        }\n        this.$arrow.css({\n          left: `${left}%`,\n          width: `${width}%`\n        });\n      };\n      instance.p1.$element.on(`${instance.namespace}::move`, onUpdate);\n      instance.p2.$element.on(`${instance.namespace}::move`, onUpdate);\n    }\n  }\n};\n\nvar tip = {\n  defaults: {\n    active: 'always' // 'always' 'onMove'\n  },\n  init(instance) {\n    const that = this;\n    const opts = $.extend({}, this.defaults, instance.options.tip);\n\n    this.opts = opts;\n    this.classes = {\n      tip: `${instance.namespace}-tip`,\n      show: `${instance.namespace}-tip-show`\n    };\n    $.each(instance.pointer, (i, p) => {\n      const $tip = $('<span></span>').appendTo(instance.pointer[i].$element);\n\n      $tip.addClass(that.classes.tip);\n      if (that.opts.active === 'onMove') {\n        $tip.css({\n          display: 'none'\n        });\n        p.$element.on(`${instance.namespace}::moveEnd`, () => {\n          that.hide($tip);\n          return false;\n        }).on(`${instance.namespace}::moveStart`, () => {\n          that.show($tip);\n          return false;\n        });\n      }\n      p.$element.on(`${instance.namespace}::move`, () => {\n        let value;\n        if (instance.options.range) {\n          value = instance.get()[i];\n        } else {\n          value = instance.get();\n        }\n        if (typeof instance.options.format === 'function') {\n          if (instance.options.replaceFirst && typeof value !== 'number') {\n            if (typeof instance.options.replaceFirst === 'string') {\n              value = instance.options.replaceFirst;\n            }\n            if (typeof instance.options.replaceFirst === 'object') {\n              for (const key in instance.options.replaceFirst) {\n                if(Object.hasOwnProperty(instance.options.replaceFirst, key)){\n                  value = instance.options.replaceFirst[key];\n                }\n              }\n            }\n          } else {\n            value = instance.options.format(value);\n          }\n        }\n        $tip.text(value);\n        return false;\n      });\n    });\n  },\n  show($tip) {\n    $tip.addClass(this.classes.show);\n    $tip.css({\n      display: 'block'\n    });\n  },\n  hide($tip) {\n    $tip.removeClass(this.classes.show);\n    $tip.css({\n      display: 'none'\n    });\n  }\n};\n\nvar keyboard = function() {\n  const $doc = $(document);\n\n  $doc.on('asRange::ready', (event, instance) => {\n    let step;\n\n    const keyboard = {\n      keys: {\n        'UP': 38,\n        'DOWN': 40,\n        'LEFT': 37,\n        'RIGHT': 39,\n        'RETURN': 13,\n        'ESCAPE': 27,\n        'BACKSPACE': 8,\n        'SPACE': 32\n      },\n      map: {},\n      bound: false,\n      press(e) {\n        /*eslint consistent-return: \"off\"*/\n        const key = e.keyCode || e.which;\n        if (key in keyboard.map && typeof keyboard.map[key] === 'function') {\n          keyboard.map[key](e);\n          return false;\n        }\n      },\n      attach(map) {\n        let key;\n        let up;\n        for (key in map) {\n          if (map.hasOwnProperty(key)) {\n            up = key.toUpperCase();\n            if (up in keyboard.keys) {\n              keyboard.map[keyboard.keys[up]] = map[key];\n            } else {\n              keyboard.map[up] = map[key];\n            }\n          }\n        }\n        if (!keyboard.bound) {\n          keyboard.bound = true;\n          $doc.bind('keydown', keyboard.press);\n        }\n      },\n      detach() {\n        keyboard.bound = false;\n        keyboard.map = {};\n        $doc.unbind('keydown', keyboard.press);\n      }\n    };\n\n    if (instance.options.keyboard === true) {\n      $.each(instance.pointer, (i, p) => {\n        if (instance.options.step) {\n          step = instance.options.step;\n        } else {\n          step = 1;\n        }\n        const left = () => {\n          const value = p.value;\n          p.set(value - step);\n        };\n        const right = () => {\n          const value = p.value;\n          p.set(value + step);\n        };\n        p.$element.attr('tabindex', '0').on('focus', () => {\n          keyboard.attach({\n            left,\n            right\n          });\n          return false;\n        }).on('blur', () => {\n          keyboard.detach();\n          return false;\n        });\n      });\n    }\n  });\n};\n\nlet components = {};\n\n/**\n * Plugin constructor\n **/\nclass asRange {\n  constructor(element, options) {\n    const metas = {};\n    this.element = element;\n    this.$element = $(element);\n\n    if (this.$element.is('input')) {\n      const value = this.$element.val();\n\n      if (typeof value === 'string') {\n        metas.value = value.split(',');\n      }\n\n      $.each(['min', 'max', 'step'], (index, key) => {\n        const val = parseFloat(this.$element.attr(key));\n        if (!isNaN(val)) {\n          metas[key] = val;\n        }\n      });\n\n      this.$element.css({\n        display: 'none'\n      });\n      this.$wrap = $(\"<div></div>\");\n      this.$element.after(this.$wrap);\n    } else {\n      this.$wrap = this.$element;\n    }\n\n    this.options = $.extend({}, DEFAULTS, options, this.$element.data(), metas);\n    this.namespace = this.options.namespace;\n    this.components = $.extend(true, {}, components);\n    if (this.options.range) {\n      this.options.replaceFirst = false;\n    }\n\n    // public properties\n    this.value = this.options.value;\n    if (this.value === null) {\n      this.value = this.options.min;\n    }\n\n    if (!this.options.range) {\n      if ($.isArray(this.value)) {\n        this.value = this.value[0];\n      }\n    } else if (!$.isArray(this.value)) {\n      this.value = [this.value, this.value];\n    } else if (this.value.length === 1) {\n      this.value[1] = this.value[0];\n    }\n\n    this.min = this.options.min;\n    this.max = this.options.max;\n    this.step = this.options.step;\n    this.interval = this.max - this.min;\n\n    // flag\n    this.initialized = false;\n    this.updating = false;\n    this.disabled = false;\n\n    if (this.options.direction === 'v') {\n      this.direction = {\n        axis: 'pageY',\n        position: 'top'\n      };\n    } else {\n      this.direction = {\n        axis: 'pageX',\n        position: 'left'\n      };\n    }\n\n    this.$wrap.addClass(this.namespace);\n\n    if (this.options.skin) {\n      this.$wrap.addClass(`${this.namespace}_${this.options.skin}`);\n    }\n\n    if (this.max < this.min || this.step >= this.interval) {\n      throw new Error('error options about max min step');\n    }\n\n    this.init();\n  }\n\n  init() {\n    this.$wrap.append(`<div class=\"${this.namespace}-bar\" />`);\n\n    // build pointers\n    this.buildPointers();\n\n    // initial components\n    this.components.selected.init(this);\n\n    if (this.options.tip !== false) {\n      this.components.tip.init(this);\n    }\n    if (this.options.scale !== false) {\n      this.components.scale.init(this);\n    }\n\n    // initial pointer value\n    this.set(this.value);\n\n    // Bind events\n    this.bindEvents();\n\n    this._trigger('ready');\n    this.initialized = true;\n  }\n\n  _trigger(eventType, ...params) {\n    let data = [this].concat(params);\n\n    // event\n    this.$element.trigger(this.namespace + `::${eventType}`, data);\n\n    // callback\n    eventType = eventType.replace(/\\b\\w+\\b/g, (word) => {\n      return word.substring(0, 1).toUpperCase() + word.substring(1);\n    });\n    let onFunction = `on${eventType}`;\n\n    if (typeof this.options[onFunction] === 'function') {\n      this.options[onFunction].apply(this, params);\n    }\n  }\n\n  buildPointers() {\n    this.pointer = [];\n    let pointerCount = 1;\n    if (this.options.range) {\n      pointerCount = 2;\n    }\n    for (let i = 1; i <= pointerCount; i++) {\n      const $pointer = $(`<div class=\"${this.namespace}-pointer ${this.namespace}-pointer-${i}\"></div>`).appendTo(this.$wrap);\n      const p = new Pointer($pointer, i, this);\n      this.pointer.push(p);\n    }\n\n    // alias of pointer\n    this.p1 = this.pointer[0];\n\n    if (this.options.range) {\n      this.p2 = this.pointer[1];\n    }\n  }\n\n  bindEvents() {\n    const that = this;\n    this.$wrap.on('touchstart.asRange mousedown.asRange', event => {\n      /*eslint consistent-return: \"off\"*/\n      if (that.disabled === true) {\n        return;\n      }\n      event = getEventObject(event);\n      const rightclick = (event.which) ? (event.which === 3) : (event.button === 2);\n      if (rightclick) {\n        return false;\n      }\n\n      const offset = that.$wrap.offset();\n      const start = event[that.direction.axis] - offset[that.direction.position];\n      const p = that.getAdjacentPointer(start);\n\n      p.mousedown(event);\n      return false;\n    });\n\n    if (this.$element.is('input')) {\n      this.$element.on(this.namespace + `::change`, () => {\n        const value = this.get();\n        this.$element.val(value);\n      });\n    }\n\n    $.each(this.pointer, (i, p) => {\n      p.$element.on(this.namespace + `::move`, () => {\n        that.value = that.get();\n        if (!that.initialized || that.updating) {\n          return false;\n        }\n        that._trigger('change', that.value);\n        return false;\n      });\n    });\n  }\n\n  getValueFromPosition(px) {\n    if (px > 0) {\n      return this.min + (px / this.getLength()) * this.interval;\n    }\n    return 0;\n  }\n\n  getAdjacentPointer(start) {\n    const value = this.getValueFromPosition(start);\n    if (this.options.range) {\n      const p1 = this.p1.value;\n      const p2 = this.p2.value;\n      const diff = Math.abs(p1 - p2);\n      if (p1 <= p2) {\n        if (value > p1 + diff / 2) {\n          return this.p2;\n        }\n        return this.p1;\n      }\n\n      if (value > p2 + diff / 2) {\n        return this.p1;\n      }\n\n      return this.p2;\n    }\n    return this.p1;\n  }\n\n  getLength() {\n    if (this.options.direction === 'v') {\n      return this.$wrap.height();\n    }\n    return this.$wrap.width();\n  }\n\n  update(options) {\n    this.updating = true;\n    $.each(['max', 'min', 'step', 'limit', 'value'], (key, value) => {\n      if (options[value]) {\n        this[value] = options[value];\n      }\n    });\n    if (options.max || options.min) {\n      this.setInterval(options.min, options.max);\n    }\n\n    if (!options.value) {\n      this.value = options.min;\n    }\n\n    $.each(this.components, (key, value) => {\n      if (typeof value.update === \"function\") {\n        value.update(this);\n      }\n    });\n\n    this.set(this.value);\n\n    this._trigger('update');\n\n    this.updating = false;\n  }\n\n  get() {\n    const value = [];\n\n    $.each(this.pointer, (i, p) => {\n      value[i] = p.get();\n    });\n\n    if (this.options.range) {\n      return value;\n    }\n\n    if (value[0] === this.options.min) {\n      if (typeof this.options.replaceFirst === 'string') {\n        value[0] = this.options.replaceFirst;\n      }\n      if (typeof this.options.replaceFirst === 'object') {\n        for (const key in this.options.replaceFirst) {\n          if(Object.hasOwnProperty(this.options.replaceFirst, key)){\n            value[0] = key;\n          }\n        }\n      }\n    }\n\n    return value[0];\n  }\n\n  set(value) {\n    if (this.options.range) {\n      if (typeof value === 'number') {\n        value = [value];\n      }\n      if (!$.isArray(value)) {\n        return;\n      }\n      $.each(this.pointer, (i, p) => {\n        p.set(value[i]);\n      });\n    } else {\n      this.p1.set(value);\n    }\n\n    this.value = value;\n  }\n\n  val(value) {\n    if (value) {\n      this.set(value);\n      return this;\n    }\n    return this.get();\n  }\n\n  setInterval(start, end) {\n    this.min = start;\n    this.max = end;\n    this.interval = end - start;\n  }\n\n  enable() {\n    this.disabled = false;\n    this.$wrap.removeClass(`${this.namespace}_disabled`);\n\n    this._trigger('enable');\n    return this;\n  }\n\n  disable() {\n    this.disabled = true;\n    this.$wrap.addClass(`${this.namespace}_disabled`);\n\n    this._trigger('disable');\n    return this;\n  }\n\n  destroy() {\n    $.each(this.pointer, (i, p) => {\n      p.destroy();\n    });\n    this.$wrap.destroy();\n\n    this._trigger('destroy');\n  }\n\n  static registerComponent(component, methods) {\n    components[component] = methods;\n  }\n\n  static setDefaults(options) {\n    $.extend(DEFAULTS, $.isPlainObject(options) && options);\n  }\n}\n\nasRange.registerComponent('scale', scale);\nasRange.registerComponent('selected', selected);\nasRange.registerComponent('tip', tip);\nkeyboard();\n\nvar info = {\n  version:'0.3.4'\n};\n\nconst NAMESPACE = 'asRange';\nconst OtherAsRange = $.fn.asRange;\n\nconst jQueryAsRange = function(options, ...args) {\n  if (typeof options === 'string') {\n    const method = options;\n\n    if (/^_/.test(method)) {\n      return false;\n    } else if ((/^(get)$/.test(method)) || (method === 'val' && args.length === 0)) {\n      const instance = this.first().data(NAMESPACE);\n      if (instance && typeof instance[method] === 'function') {\n        return instance[method](...args);\n      }\n    } else {\n      return this.each(function() {\n        const instance = $.data(this, NAMESPACE);\n        if (instance && typeof instance[method] === 'function') {\n          instance[method](...args);\n        }\n      });\n    }\n  }\n\n  return this.each(function() {\n    if (!$(this).data(NAMESPACE)) {\n      $(this).data(NAMESPACE, new asRange(this, options));\n    }\n  });\n};\n\n$.fn.asRange = jQueryAsRange;\n\n$.asRange = $.extend({\n  setDefaults: asRange.setDefaults,\n  noConflict: function() {\n    $.fn.asRange = OtherAsRange;\n    return jQueryAsRange;\n  }\n}, info);\n"]}